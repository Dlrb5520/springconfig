server:
  port: 9001
eureka:
  client:
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/
feign:
  hystrix:
    enabled: true
  # 服务降级的超时时间配置(超时的时间，服务2s未返回就判断为超时)
    command:
      default:
        execution:
          isolation:
            thread:
              timeoutInMillseconds: 2000
spring:
  freemarker:
    suffix: .html
    templateLoaderPath: classpath:/templates/
    cache: false #禁用模板缓存,正式环境取消
  application:
    name: login-consumer9001
  main:
    allow-bean-definition-overriding: true
    #重试机制
    #该参数用来开启重试机制，默认是关闭
  cloud:
    loadbalancer:
      retry:
        enabled: true
  http:
    multipart:
      enabled=false:ribbon:
  servlet:
    multipart:
      enabled: false
  #该参数用来开启重试机制，默认是关闭
  OkToRetryOnAllOperations: true
  #对当前实例的重试次数
  MaxAutoRetries: 2

#feign + ribbon 实现负载均衡
login-product8001:  #提供服务名称
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule  #负载均衡策略


# RoundRobinRule
# 轮询策略：理解起来比较简单，就是拿到所有的server集合，然后根据id进行遍历。

# RandomRule
# 随机策略：使用jdk自带的随机数生成工具，生成一个随机数，然后去可用服务列表中拉取服务节点Server。如果当前节点不可用，则进入下一轮随机策略，直到选到可用服务节点为止

# AvailabilityFilteringRule
# 策略描述：过滤掉连接失败的服务节点，并且过滤掉高并发的服务节点，然后从健康的服务节点中，使用轮询策略选出一个节点返回。

# WeightedResponseTimeRule
# 策略描述：根据响应时间，分配一个权重weight，响应时间越长，weight越小，被选中的可能性越低。

# RetryRule
# 轮询失败重试策略（RetryRule）是这样工作的，首先使用轮询策略进行负载均衡，如果轮询失败，则再使用轮询策略进行一次重试，相当于重试下一个节点，看下一个节点是否可用，如果再失败，则直接返回失败。

# BestAvailableRule
# 策略描述：选择一个并发量最小的server返回。如何判断并发量最小呢？ServerStats有个属性activeRequestCount，这个属性记录的就是server的并发量。轮询所有的server，选择其中activeRequestCount最小的那个server，就是并发量最小的服务节点。



